## Put comments here that give an overall description of what your
## functions do

## Write a short comment describing this function
## The first function, makeCacheMatrix, creates a special "matrix",
## which can cache its inverse

makeCacheMatrix <-  function(x = matrix()) {
        invers <- NULL
        set  <- function(y) {
                x <<- y
                invers <<- NULL
        }
        get <- function() x
        settheinverse <- function(inverse) invers <<- inverse
        gettheinverse <- function() invers
        list(set = set, get = get,
             settheinverse = settheinverse,
             gettheinverse = gettheinverse)




## Write a short comment describing this function
## cacheSolve function computes the inverse of the special "matrix"
## returned by makeCacheMatrix above.
## If the inverse has already been calculated (and the matrix has not changed),
## then cacheSolve should retrieve the inverse from the cache.

cacheSolve <- function(x, ...) {
                invers<= x$gettheinverse()
                if(!is.null(invers)) {
                        message("getting cached data")
                        return(invers)
        }
                mat <- x$get()
                invers <- solve(mat, ...)
                x$settheinverse(invers)
                invers
        }
